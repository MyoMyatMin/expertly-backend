// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: reports.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createReport = `-- name: CreateReport :one
INSERT INTO reports (report_id, reported_by, target_post_id, target_user_id, target_comment_id, reason) VALUES ($1, $2, $3, $4, $5, $6) RETURNING report_id, reported_by, target_post_id, target_user_id, target_comment_id, reason, status, reviewed_at, reviewedby, created_at
`

type CreateReportParams struct {
	ReportID        uuid.UUID
	ReportedBy      uuid.UUID
	TargetPostID    uuid.NullUUID
	TargetUserID    uuid.NullUUID
	TargetCommentID uuid.NullUUID
	Reason          string
}

func (q *Queries) CreateReport(ctx context.Context, arg CreateReportParams) (Report, error) {
	row := q.db.QueryRowContext(ctx, createReport,
		arg.ReportID,
		arg.ReportedBy,
		arg.TargetPostID,
		arg.TargetUserID,
		arg.TargetCommentID,
		arg.Reason,
	)
	var i Report
	err := row.Scan(
		&i.ReportID,
		&i.ReportedBy,
		&i.TargetPostID,
		&i.TargetUserID,
		&i.TargetCommentID,
		&i.Reason,
		&i.Status,
		&i.ReviewedAt,
		&i.Reviewedby,
		&i.CreatedAt,
	)
	return i, err
}

const listAllReportDetails = `-- name: ListAllReportDetails :many
SELECT 
    r.report_id as report_id,
    r.reported_by as reported_by,
    r.target_post_id as target_post_id,
    r.target_user_id as target_user_id,
    r.target_comment_id as target_comment_id,
    r.reason as reason,
    r.status as status,
    r.reviewed_at as reviewed_at,
    r.reviewedby as reviewedby,
    r.created_at as created_at,

    u.user_id as reported_by_id,
    u.name as reported_by_name,
    u.username as reported_by_username,

    p.post_id as target_post_id,
    p.slug as target_post_slug,

    c.comment_id as target_comment_id,
    c.content as target_comment

FROM reports r
LEFT JOIN users u ON r.reported_by = u.id
LEFT JOIN posts p ON r.target_post_id = p.post_id
LEFT JOIN comments c ON r.target_comment_id = c.id
ORDER BY r.created_at DESC
`

type ListAllReportDetailsRow struct {
	ReportID           uuid.UUID
	ReportedBy         uuid.UUID
	TargetPostID       uuid.NullUUID
	TargetUserID       uuid.NullUUID
	TargetCommentID    uuid.NullUUID
	Reason             string
	Status             sql.NullString
	ReviewedAt         sql.NullTime
	Reviewedby         uuid.NullUUID
	CreatedAt          sql.NullTime
	ReportedByID       uuid.NullUUID
	ReportedByName     sql.NullString
	ReportedByUsername sql.NullString
	TargetPostID_2     uuid.NullUUID
	TargetPostSlug     sql.NullString
	TargetCommentID_2  uuid.NullUUID
	TargetComment      sql.NullString
}

func (q *Queries) ListAllReportDetails(ctx context.Context) ([]ListAllReportDetailsRow, error) {
	rows, err := q.db.QueryContext(ctx, listAllReportDetails)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAllReportDetailsRow
	for rows.Next() {
		var i ListAllReportDetailsRow
		if err := rows.Scan(
			&i.ReportID,
			&i.ReportedBy,
			&i.TargetPostID,
			&i.TargetUserID,
			&i.TargetCommentID,
			&i.Reason,
			&i.Status,
			&i.ReviewedAt,
			&i.Reviewedby,
			&i.CreatedAt,
			&i.ReportedByID,
			&i.ReportedByName,
			&i.ReportedByUsername,
			&i.TargetPostID_2,
			&i.TargetPostSlug,
			&i.TargetCommentID_2,
			&i.TargetComment,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateReportStatus = `-- name: UpdateReportStatus :one
UPDATE reports SET status = $1, reviewed_at = $2, reviewedby = $3, updated_at = CURRENT_TIMESTAMP WHERE report_id = $4 RETURNING report_id, reported_by, target_post_id, target_user_id, target_comment_id, reason, status, reviewed_at, reviewedby, created_at
`

type UpdateReportStatusParams struct {
	Status     sql.NullString
	ReviewedAt sql.NullTime
	Reviewedby uuid.NullUUID
	ReportID   uuid.UUID
}

func (q *Queries) UpdateReportStatus(ctx context.Context, arg UpdateReportStatusParams) (Report, error) {
	row := q.db.QueryRowContext(ctx, updateReportStatus,
		arg.Status,
		arg.ReviewedAt,
		arg.Reviewedby,
		arg.ReportID,
	)
	var i Report
	err := row.Scan(
		&i.ReportID,
		&i.ReportedBy,
		&i.TargetPostID,
		&i.TargetUserID,
		&i.TargetCommentID,
		&i.Reason,
		&i.Status,
		&i.ReviewedAt,
		&i.Reviewedby,
		&i.CreatedAt,
	)
	return i, err
}
