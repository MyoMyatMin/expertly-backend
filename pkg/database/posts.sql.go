// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: posts.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (
    post_id,
    user_id,
    slug,
    title,
    content
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
)
RETURNING post_id, user_id, slug, title, content, created_at, updated_at
`

type CreatePostParams struct {
	PostID  uuid.UUID
	UserID  uuid.UUID
	Slug    string
	Title   string
	Content string
}

type CreatePostRow struct {
	PostID    uuid.UUID
	UserID    uuid.UUID
	Slug      string
	Title     string
	Content   string
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (CreatePostRow, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.PostID,
		arg.UserID,
		arg.Slug,
		arg.Title,
		arg.Content,
	)
	var i CreatePostRow
	err := row.Scan(
		&i.PostID,
		&i.UserID,
		&i.Slug,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts
WHERE post_id = $1
`

func (q *Queries) DeletePost(ctx context.Context, postID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePost, postID)
	return err
}

const getPost = `-- name: GetPost :one
SELECT 
    post_id, 
    user_id, 
    slug, 
    title, 
    content, 
    created_at, 
    updated_at
FROM posts
WHERE post_id = $1
`

type GetPostRow struct {
	PostID    uuid.UUID
	UserID    uuid.UUID
	Slug      string
	Title     string
	Content   string
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

func (q *Queries) GetPost(ctx context.Context, postID uuid.UUID) (GetPostRow, error) {
	row := q.db.QueryRowContext(ctx, getPost, postID)
	var i GetPostRow
	err := row.Scan(
		&i.PostID,
		&i.UserID,
		&i.Slug,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPostBySlug = `-- name: GetPostBySlug :one
SELECT 
    post_id, 
    user_id, 
    slug, 
    title, 
    content, 
    created_at, 
    updated_at
FROM posts
WHERE slug = $1
`

type GetPostBySlugRow struct {
	PostID    uuid.UUID
	UserID    uuid.UUID
	Slug      string
	Title     string
	Content   string
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

func (q *Queries) GetPostBySlug(ctx context.Context, slug string) (GetPostBySlugRow, error) {
	row := q.db.QueryRowContext(ctx, getPostBySlug, slug)
	var i GetPostBySlugRow
	err := row.Scan(
		&i.PostID,
		&i.UserID,
		&i.Slug,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPostDetailsByID = `-- name: GetPostDetailsByID :one
SELECT 
    p.post_id, 
    p.user_id, 
    p.slug, 
    p.title, 
    p.content, 
    p.created_at, 
    p.updated_at,
    u.name AS author_name,
    u.username AS author_username,
    COALESCE(upvote_counts.count, 0) AS upvote_count,
    COALESCE(comment_counts.count, 0) AS comment_count
FROM posts p
JOIN users u ON p.user_id = u.user_id
LEFT JOIN (
    SELECT 
        post_id, 
        COUNT(*) AS count
    FROM upvotes
    GROUP BY post_id
) upvote_counts ON p.post_id = upvote_counts.post_id
LEFT JOIN (
    SELECT 
        post_id, 
        COUNT(*) AS count
    FROM comments
    GROUP BY post_id
) comment_counts ON p.post_id = comment_counts.post_id
WHERE p.post_id = $1
`

type GetPostDetailsByIDRow struct {
	PostID         uuid.UUID
	UserID         uuid.UUID
	Slug           string
	Title          string
	Content        string
	CreatedAt      sql.NullTime
	UpdatedAt      sql.NullTime
	AuthorName     string
	AuthorUsername string
	UpvoteCount    int64
	CommentCount   int64
}

func (q *Queries) GetPostDetailsByID(ctx context.Context, postID uuid.UUID) (GetPostDetailsByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getPostDetailsByID, postID)
	var i GetPostDetailsByIDRow
	err := row.Scan(
		&i.PostID,
		&i.UserID,
		&i.Slug,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AuthorName,
		&i.AuthorUsername,
		&i.UpvoteCount,
		&i.CommentCount,
	)
	return i, err
}

const listPosts = `-- name: ListPosts :many
SELECT 
    post_id, 
    user_id, 
    slug, 
    title, 
    content, 
    created_at, 
    updated_at
FROM posts
ORDER BY created_at DESC
`

type ListPostsRow struct {
	PostID    uuid.UUID
	UserID    uuid.UUID
	Slug      string
	Title     string
	Content   string
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

func (q *Queries) ListPosts(ctx context.Context) ([]ListPostsRow, error) {
	rows, err := q.db.QueryContext(ctx, listPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPostsRow
	for rows.Next() {
		var i ListPostsRow
		if err := rows.Scan(
			&i.PostID,
			&i.UserID,
			&i.Slug,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :one
UPDATE posts
SET
    title = $2,
    slug = $3,
    content = $4,
    updated_at = CURRENT_TIMESTAMP
WHERE post_id = $1
RETURNING post_id, user_id, slug, title, content, created_at, updated_at
`

type UpdatePostParams struct {
	PostID  uuid.UUID
	Title   string
	Slug    string
	Content string
}

type UpdatePostRow struct {
	PostID    uuid.UUID
	UserID    uuid.UUID
	Slug      string
	Title     string
	Content   string
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (UpdatePostRow, error) {
	row := q.db.QueryRowContext(ctx, updatePost,
		arg.PostID,
		arg.Title,
		arg.Slug,
		arg.Content,
	)
	var i UpdatePostRow
	err := row.Scan(
		&i.PostID,
		&i.UserID,
		&i.Slug,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
