// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: contributors.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const checkIfUserIsContributor = `-- name: CheckIfUserIsContributor :one
SELECT EXISTS (
    SELECT 1
    FROM Contributors
    WHERE user_id = $1
)
`

func (q *Queries) CheckIfUserIsContributor(ctx context.Context, userID uuid.UUID) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkIfUserIsContributor, userID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createContributor = `-- name: CreateContributor :one
INSERT INTO Contributors (
    user_id,
    expertise_fields
) VALUES (
    $1,
    $2
)
RETURNING user_id, expertise_fields, created_at
`

type CreateContributorParams struct {
	UserID          uuid.UUID
	ExpertiseFields []string
}

func (q *Queries) CreateContributor(ctx context.Context, arg CreateContributorParams) (Contributor, error) {
	row := q.db.QueryRowContext(ctx, createContributor, arg.UserID, pq.Array(arg.ExpertiseFields))
	var i Contributor
	err := row.Scan(&i.UserID, pq.Array(&i.ExpertiseFields), &i.CreatedAt)
	return i, err
}

const deleteContributor = `-- name: DeleteContributor :exec
DELETE FROM Contributors
WHERE user_id = $1
`

func (q *Queries) DeleteContributor(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteContributor, userID)
	return err
}

const getContributorByUserId = `-- name: GetContributorByUserId :one
SELECT 
    user_id,
    expertise_fields,
    created_at
FROM Contributors
WHERE user_id = $1
`

func (q *Queries) GetContributorByUserId(ctx context.Context, userID uuid.UUID) (Contributor, error) {
	row := q.db.QueryRowContext(ctx, getContributorByUserId, userID)
	var i Contributor
	err := row.Scan(&i.UserID, pq.Array(&i.ExpertiseFields), &i.CreatedAt)
	return i, err
}

const getPostsByContributor = `-- name: GetPostsByContributor :many
SELECT 
    p.post_id, 
    p.user_id, 
    p.slug, 
    p.title, 
    p.content, 
    p.created_at, 
    p.updated_at,
    COUNT(DISTINCT u.user_id) AS upvote_count,
    COUNT( c.comment_id) AS comment_count
FROM posts p
LEFT JOIN upvotes u ON p.post_id = u.post_id
LEFT JOIN comments c ON p.post_id = c.post_id
WHERE p.user_id = $1
GROUP BY p.post_id
ORDER BY p.created_at DESC
`

type GetPostsByContributorRow struct {
	PostID       uuid.UUID
	UserID       uuid.UUID
	Slug         string
	Title        string
	Content      string
	CreatedAt    sql.NullTime
	UpdatedAt    sql.NullTime
	UpvoteCount  int64
	CommentCount int64
}

func (q *Queries) GetPostsByContributor(ctx context.Context, userID uuid.UUID) ([]GetPostsByContributorRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostsByContributor, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsByContributorRow
	for rows.Next() {
		var i GetPostsByContributorRow
		if err := rows.Scan(
			&i.PostID,
			&i.UserID,
			&i.Slug,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UpvoteCount,
			&i.CommentCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAllContributors = `-- name: ListAllContributors :many
SELECT 
    user_id,
    expertise_fields,
    created_at
FROM Contributors
`

func (q *Queries) ListAllContributors(ctx context.Context) ([]Contributor, error) {
	rows, err := q.db.QueryContext(ctx, listAllContributors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contributor
	for rows.Next() {
		var i Contributor
		if err := rows.Scan(&i.UserID, pq.Array(&i.ExpertiseFields), &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchContributorsByExpertiseField = `-- name: SearchContributorsByExpertiseField :many
SELECT 
    user_id,
    expertise_fields,
    created_at
FROM Contributors
WHERE $1 = ANY(expertise_fields)
`

func (q *Queries) SearchContributorsByExpertiseField(ctx context.Context, expertiseFields []string) ([]Contributor, error) {
	rows, err := q.db.QueryContext(ctx, searchContributorsByExpertiseField, pq.Array(expertiseFields))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contributor
	for rows.Next() {
		var i Contributor
		if err := rows.Scan(&i.UserID, pq.Array(&i.ExpertiseFields), &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateContributorExpertiseFields = `-- name: UpdateContributorExpertiseFields :exec
UPDATE Contributors
SET expertise_fields = $2
WHERE user_id = $1
`

type UpdateContributorExpertiseFieldsParams struct {
	UserID          uuid.UUID
	ExpertiseFields []string
}

func (q *Queries) UpdateContributorExpertiseFields(ctx context.Context, arg UpdateContributorExpertiseFieldsParams) error {
	_, err := q.db.ExecContext(ctx, updateContributorExpertiseFields, arg.UserID, pq.Array(arg.ExpertiseFields))
	return err
}
