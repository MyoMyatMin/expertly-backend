// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: following.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createFollow = `-- name: CreateFollow :exec
INSERT INTO following (follower_id, following_id)
VALUES ($1, $2)
ON CONFLICT DO NOTHING
`

type CreateFollowParams struct {
	FollowerID  uuid.UUID
	FollowingID uuid.UUID
}

func (q *Queries) CreateFollow(ctx context.Context, arg CreateFollowParams) error {
	_, err := q.db.ExecContext(ctx, createFollow, arg.FollowerID, arg.FollowingID)
	return err
}

const deleteFollow = `-- name: DeleteFollow :exec
DELETE FROM following
WHERE follower_id = $1 AND following_id = $2
`

type DeleteFollowParams struct {
	FollowerID  uuid.UUID
	FollowingID uuid.UUID
}

func (q *Queries) DeleteFollow(ctx context.Context, arg DeleteFollowParams) error {
	_, err := q.db.ExecContext(ctx, deleteFollow, arg.FollowerID, arg.FollowingID)
	return err
}

const getFeed = `-- name: GetFeed :many
SELECT posts.post_id, posts.title, posts.content, posts.slug, posts.user_id, posts.created_at, posts.updated_at, users.name, users.username, 
    (SELECT COUNT(*) FROM comments WHERE comments.post_id = posts.post_id) AS comment_count,
    (SELECT COUNT(*) FROM upvotes WHERE upvotes.post_id = posts.post_id) AS upvote_count
FROM posts
JOIN following ON posts.user_id = following.following_id
JOIN users ON posts.user_id = users.user_id
WHERE following.follower_id = $1
ORDER BY posts.created_at DESC
`

type GetFeedRow struct {
	PostID       uuid.UUID
	Title        string
	Content      string
	Slug         string
	UserID       uuid.UUID
	CreatedAt    sql.NullTime
	UpdatedAt    sql.NullTime
	Name         string
	Username     string
	CommentCount int64
	UpvoteCount  int64
}

func (q *Queries) GetFeed(ctx context.Context, followerID uuid.UUID) ([]GetFeedRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeed, followerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedRow
	for rows.Next() {
		var i GetFeedRow
		if err := rows.Scan(
			&i.PostID,
			&i.Title,
			&i.Content,
			&i.Slug,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Username,
			&i.CommentCount,
			&i.UpvoteCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFollowStatus = `-- name: GetFollowStatus :one
SELECT EXISTS (
    SELECT 1
    FROM following
    WHERE follower_id = $1 AND following_id = $2
)
`

type GetFollowStatusParams struct {
	FollowerID  uuid.UUID
	FollowingID uuid.UUID
}

func (q *Queries) GetFollowStatus(ctx context.Context, arg GetFollowStatusParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, getFollowStatus, arg.FollowerID, arg.FollowingID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getFollowingCount = `-- name: GetFollowingCount :one
SELECT COUNT(following_id)
FROM following
WHERE follower_id = $1
`

func (q *Queries) GetFollowingCount(ctx context.Context, followerID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, getFollowingCount, followerID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getFollowingList = `-- name: GetFollowingList :many
SELECT 
    following.following_id,
    users.name,
    users.username
FROM following
JOIN users ON following.following_id = users.user_id
WHERE following.follower_id = $1
`

type GetFollowingListRow struct {
	FollowingID uuid.UUID
	Name        string
	Username    string
}

func (q *Queries) GetFollowingList(ctx context.Context, followerID uuid.UUID) ([]GetFollowingListRow, error) {
	rows, err := q.db.QueryContext(ctx, getFollowingList, followerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFollowingListRow
	for rows.Next() {
		var i GetFollowingListRow
		if err := rows.Scan(&i.FollowingID, &i.Name, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFollwersCount = `-- name: GetFollwersCount :one
SELECT COUNT(follower_id)
FROM following
WHERE following_id = $1
`

func (q *Queries) GetFollwersCount(ctx context.Context, followingID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, getFollwersCount, followingID)
	var count int64
	err := row.Scan(&count)
	return count, err
}
