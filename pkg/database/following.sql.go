// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: following.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createFollow = `-- name: CreateFollow :exec
INSERT INTO following (follower_id, followee_id)
VALUES ($1, $2)
ON CONFLICT DO NOTHING
`

type CreateFollowParams struct {
	FollowerID uuid.UUID
	FolloweeID uuid.UUID
}

func (q *Queries) CreateFollow(ctx context.Context, arg CreateFollowParams) error {
	_, err := q.db.ExecContext(ctx, createFollow, arg.FollowerID, arg.FolloweeID)
	return err
}

const deleteFollow = `-- name: DeleteFollow :exec
DELETE FROM following
WHERE follower_id = $1 AND followee_id = $2
`

type DeleteFollowParams struct {
	FollowerID uuid.UUID
	FolloweeID uuid.UUID
}

func (q *Queries) DeleteFollow(ctx context.Context, arg DeleteFollowParams) error {
	_, err := q.db.ExecContext(ctx, deleteFollow, arg.FollowerID, arg.FolloweeID)
	return err
}

const getFeed = `-- name: GetFeed :many
SELECT posts.id, posts.user_id, posts.title, posts.content, posts.created_at, posts.updated_at, posts.slug
FROM posts
JOIN following ON posts.user_id = following.followee_id
WHERE following.follower_id = $1
ORDER BY posts.created_at DESC
`

func (q *Queries) GetFeed(ctx context.Context, followerID uuid.UUID) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getFeed, followerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Slug,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFollowerList = `-- name: GetFollowerList :many
SELECT follower_id, followed_at
FROM following
WHERE followee_id = $1
`

type GetFollowerListRow struct {
	FollowerID uuid.UUID
	FollowedAt sql.NullTime
}

func (q *Queries) GetFollowerList(ctx context.Context, followeeID uuid.UUID) ([]GetFollowerListRow, error) {
	rows, err := q.db.QueryContext(ctx, getFollowerList, followeeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFollowerListRow
	for rows.Next() {
		var i GetFollowerListRow
		if err := rows.Scan(&i.FollowerID, &i.FollowedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFollowingList = `-- name: GetFollowingList :many
SELECT followee_id, followed_at
FROM following
WHERE follower_id = $1
`

type GetFollowingListRow struct {
	FolloweeID uuid.UUID
	FollowedAt sql.NullTime
}

func (q *Queries) GetFollowingList(ctx context.Context, followerID uuid.UUID) ([]GetFollowingListRow, error) {
	rows, err := q.db.QueryContext(ctx, getFollowingList, followerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFollowingListRow
	for rows.Next() {
		var i GetFollowingListRow
		if err := rows.Scan(&i.FolloweeID, &i.FollowedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
