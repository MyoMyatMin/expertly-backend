// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: upvotes.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const deleteUpvote = `-- name: DeleteUpvote :one
DELETE FROM upvotes
WHERE user_id = $1 AND post_id = $2
RETURNING user_id, post_id, created_at
`

type DeleteUpvoteParams struct {
	UserID uuid.UUID
	PostID uuid.UUID
}

func (q *Queries) DeleteUpvote(ctx context.Context, arg DeleteUpvoteParams) (Upvote, error) {
	row := q.db.QueryRowContext(ctx, deleteUpvote, arg.UserID, arg.PostID)
	var i Upvote
	err := row.Scan(&i.UserID, &i.PostID, &i.CreatedAt)
	return i, err
}

const insertUpvote = `-- name: InsertUpvote :one
INSERT INTO upvotes (user_id, post_id)
VALUES ($1, $2)
RETURNING user_id, post_id, created_at
`

type InsertUpvoteParams struct {
	UserID uuid.UUID
	PostID uuid.UUID
}

func (q *Queries) InsertUpvote(ctx context.Context, arg InsertUpvoteParams) (Upvote, error) {
	row := q.db.QueryRowContext(ctx, insertUpvote, arg.UserID, arg.PostID)
	var i Upvote
	err := row.Scan(&i.UserID, &i.PostID, &i.CreatedAt)
	return i, err
}
