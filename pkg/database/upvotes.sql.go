// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: upvotes.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const deleteUpvote = `-- name: DeleteUpvote :one
DELETE FROM upvotes
WHERE user_id = $1 AND post_id = $2
RETURNING user_id, post_id, created_at
`

type DeleteUpvoteParams struct {
	UserID uuid.UUID
	PostID uuid.UUID
}

func (q *Queries) DeleteUpvote(ctx context.Context, arg DeleteUpvoteParams) (Upvote, error) {
	row := q.db.QueryRowContext(ctx, deleteUpvote, arg.UserID, arg.PostID)
	var i Upvote
	err := row.Scan(&i.UserID, &i.PostID, &i.CreatedAt)
	return i, err
}

const insertUpvote = `-- name: InsertUpvote :one
INSERT INTO upvotes (
    user_id,
    post_id
) VALUES (
    $1,
    $2
)
RETURNING user_id, post_id, created_at
`

type InsertUpvoteParams struct {
	UserID uuid.UUID
	PostID uuid.UUID
}

func (q *Queries) InsertUpvote(ctx context.Context, arg InsertUpvoteParams) (Upvote, error) {
	row := q.db.QueryRowContext(ctx, insertUpvote, arg.UserID, arg.PostID)
	var i Upvote
	err := row.Scan(&i.UserID, &i.PostID, &i.CreatedAt)
	return i, err
}

const listUpvotesByPost = `-- name: ListUpvotesByPost :many
SELECT 
    user_id, 
    post_id, 
    created_at
FROM upvotes
WHERE post_id = $1
`

func (q *Queries) ListUpvotesByPost(ctx context.Context, postID uuid.UUID) ([]Upvote, error) {
	rows, err := q.db.QueryContext(ctx, listUpvotesByPost, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Upvote
	for rows.Next() {
		var i Upvote
		if err := rows.Scan(&i.UserID, &i.PostID, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUpvotesByUser = `-- name: ListUpvotesByUser :many
SELECT 
    user_id, 
    post_id, 
    created_at
FROM upvotes
WHERE user_id = $1
`

func (q *Queries) ListUpvotesByUser(ctx context.Context, userID uuid.UUID) ([]Upvote, error) {
	rows, err := q.db.QueryContext(ctx, listUpvotesByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Upvote
	for rows.Next() {
		var i Upvote
		if err := rows.Scan(&i.UserID, &i.PostID, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
