// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: moderators.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createModerator = `-- name: CreateModerator :one
INSERT INTO moderators(
    moderator_id, 
    name, 
    email, 
    password, 
    role, 
    created_by
) VALUES (
    $1, 
    $2, 
    $3, 
    $4, 
    $5, 
    $6
)
RETURNING moderator_id, name, email, role, created_at, updated_at
`

type CreateModeratorParams struct {
	ModeratorID uuid.UUID
	Name        string
	Email       string
	Password    string
	Role        string
	CreatedBy   uuid.NullUUID
}

type CreateModeratorRow struct {
	ModeratorID uuid.UUID
	Name        string
	Email       string
	Role        string
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
}

func (q *Queries) CreateModerator(ctx context.Context, arg CreateModeratorParams) (CreateModeratorRow, error) {
	row := q.db.QueryRowContext(ctx, createModerator,
		arg.ModeratorID,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.Role,
		arg.CreatedBy,
	)
	var i CreateModeratorRow
	err := row.Scan(
		&i.ModeratorID,
		&i.Name,
		&i.Email,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getALLModerators = `-- name: GetALLModerators :many
SELECT 
    moderator_id, 
    name, 
    email, 
    role, 
    created_at, 
    updated_at
FROM moderators
ORDER BY created_at DESC
`

type GetALLModeratorsRow struct {
	ModeratorID uuid.UUID
	Name        string
	Email       string
	Role        string
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
}

func (q *Queries) GetALLModerators(ctx context.Context) ([]GetALLModeratorsRow, error) {
	rows, err := q.db.QueryContext(ctx, getALLModerators)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetALLModeratorsRow
	for rows.Next() {
		var i GetALLModeratorsRow
		if err := rows.Scan(
			&i.ModeratorID,
			&i.Name,
			&i.Email,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getModeratorByEmail = `-- name: GetModeratorByEmail :one
SELECT 
    moderator_id, 
    name, 
    email, 
    password,
    role, 
    created_at, 
    updated_at
FROM moderators
WHERE email = $1
`

type GetModeratorByEmailRow struct {
	ModeratorID uuid.UUID
	Name        string
	Email       string
	Password    string
	Role        string
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
}

func (q *Queries) GetModeratorByEmail(ctx context.Context, email string) (GetModeratorByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getModeratorByEmail, email)
	var i GetModeratorByEmailRow
	err := row.Scan(
		&i.ModeratorID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getModeratorById = `-- name: GetModeratorById :one
SELECT 
    moderator_id, 
    name, 
    email, 
    role, 
    created_at, 
    updated_at
FROM moderators
WHERE moderator_id = $1
`

type GetModeratorByIdRow struct {
	ModeratorID uuid.UUID
	Name        string
	Email       string
	Role        string
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
}

func (q *Queries) GetModeratorById(ctx context.Context, moderatorID uuid.UUID) (GetModeratorByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getModeratorById, moderatorID)
	var i GetModeratorByIdRow
	err := row.Scan(
		&i.ModeratorID,
		&i.Name,
		&i.Email,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
