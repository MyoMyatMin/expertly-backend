// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(
    user_id, 
    name, 
    username,
    email, 
    password, 
    suspended_until
) VALUES (
    $1, 
    $2, 
    $3, 
    $4, 
    $5, 
    $6
)
RETURNING user_id, name, email, username, suspended_until, created_at, updated_at
`

type CreateUserParams struct {
	UserID         uuid.UUID
	Name           string
	Username       string
	Email          string
	Password       string
	SuspendedUntil sql.NullTime
}

type CreateUserRow struct {
	UserID         uuid.UUID
	Name           string
	Email          string
	Username       string
	SuspendedUntil sql.NullTime
	CreatedAt      sql.NullTime
	UpdatedAt      sql.NullTime
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.UserID,
		arg.Name,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.SuspendedUntil,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.Email,
		&i.Username,
		&i.SuspendedUntil,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getIDbyUsername = `-- name: GetIDbyUsername :one
SELECT user_id FROM users WHERE username = $1
`

func (q *Queries) GetIDbyUsername(ctx context.Context, username string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getIDbyUsername, username)
	var user_id uuid.UUID
	err := row.Scan(&user_id)
	return user_id, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT 
    user_id, 
    name, 
    username,
    email, 
    password, 
    suspended_until, 
    created_at, 
    updated_at 
FROM users 
WHERE email = $1
`

type GetUserByEmailRow struct {
	UserID         uuid.UUID
	Name           string
	Username       string
	Email          string
	Password       string
	SuspendedUntil sql.NullTime
	CreatedAt      sql.NullTime
	UpdatedAt      sql.NullTime
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.SuspendedUntil,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT 
    user_id, 
    name, 
    username,
    email, 
    password, 
    suspended_until, 
    created_at, 
    updated_at 
FROM users 
WHERE user_id = $1
`

type GetUserByIdRow struct {
	UserID         uuid.UUID
	Name           string
	Username       string
	Email          string
	Password       string
	SuspendedUntil sql.NullTime
	CreatedAt      sql.NullTime
	UpdatedAt      sql.NullTime
}

func (q *Queries) GetUserById(ctx context.Context, userID uuid.UUID) (GetUserByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getUserById, userID)
	var i GetUserByIdRow
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.SuspendedUntil,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT 
    user_id, 
    name, 
    username,
    email, 
    password, 
    suspended_until, 
    created_at, 
    updated_at 
FROM users 
WHERE username = $1
`

type GetUserByUsernameRow struct {
	UserID         uuid.UUID
	Name           string
	Username       string
	Email          string
	Password       string
	SuspendedUntil sql.NullTime
	CreatedAt      sql.NullTime
	UpdatedAt      sql.NullTime
}

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (GetUserByUsernameRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i GetUserByUsernameRow
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.SuspendedUntil,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET 
    name = $2, 
    username = $3
WHERE user_id = $1
RETURNING user_id, name, email, username, suspended_until, created_at, updated_at
`

type UpdateUserParams struct {
	UserID   uuid.UUID
	Name     string
	Username string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.UserID, arg.Name, arg.Username)
	return err
}

const updateUserSuspension = `-- name: UpdateUserSuspension :exec
UPDATE users
SET 
    suspended_until = $2
WHERE user_id = $1
`

type UpdateUserSuspensionParams struct {
	UserID         uuid.UUID
	SuspendedUntil sql.NullTime
}

func (q *Queries) UpdateUserSuspension(ctx context.Context, arg UpdateUserSuspensionParams) error {
	_, err := q.db.ExecContext(ctx, updateUserSuspension, arg.UserID, arg.SuspendedUntil)
	return err
}
