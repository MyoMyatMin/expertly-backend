// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(id, 
    name, 
    username,
    email, 
    password, 
    role, 
    suspended_until) VALUES
    (
        $1, 
        $2, 
        $3, 
        $4, 
        $5, 
        $6,
        $7
    )
    RETURNING id, name, email, role, suspended_until, created_at, updated_at,username
`

type CreateUserParams struct {
	ID             uuid.UUID
	Name           string
	Username       string
	Email          string
	Password       string
	Role           sql.NullString
	SuspendedUntil sql.NullTime
}

type CreateUserRow struct {
	ID             uuid.UUID
	Name           string
	Email          string
	Role           sql.NullString
	SuspendedUntil sql.NullTime
	CreatedAt      sql.NullTime
	UpdatedAt      sql.NullTime
	Username       string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.Role,
		arg.SuspendedUntil,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Role,
		&i.SuspendedUntil,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, 
    name, 
    username,
    email, 
    password, 
    role, 
    suspended_until, 
    created_at, 
    updated_at FROM users WHERE email = $1
`

type GetUserByEmailRow struct {
	ID             uuid.UUID
	Name           string
	Username       string
	Email          string
	Password       string
	Role           sql.NullString
	SuspendedUntil sql.NullTime
	CreatedAt      sql.NullTime
	UpdatedAt      sql.NullTime
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.SuspendedUntil,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, 
    name, 
    username,
    email, 
    password, 
    role, 
    suspended_until, 
    created_at, 
    updated_at FROM users WHERE id = $1
`

type GetUserByIdRow struct {
	ID             uuid.UUID
	Name           string
	Username       string
	Email          string
	Password       string
	Role           sql.NullString
	SuspendedUntil sql.NullTime
	CreatedAt      sql.NullTime
	UpdatedAt      sql.NullTime
}

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (GetUserByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i GetUserByIdRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.SuspendedUntil,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, 
    name, 
    username,
    email, 
    password, 
    role, 
    suspended_until, 
    created_at, 
    updated_at FROM users WHERE username = $1
`

type GetUserByUsernameRow struct {
	ID             uuid.UUID
	Name           string
	Username       string
	Email          string
	Password       string
	Role           sql.NullString
	SuspendedUntil sql.NullTime
	CreatedAt      sql.NullTime
	UpdatedAt      sql.NullTime
}

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (GetUserByUsernameRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i GetUserByUsernameRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.SuspendedUntil,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
